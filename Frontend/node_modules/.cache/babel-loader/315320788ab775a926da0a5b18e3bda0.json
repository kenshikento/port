{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\xampp1\\\\htdocs\\\\portfolio\\\\frontend\\\\src\\\\components\\\\Portfolio\\\\Portfolio.jsx\";\nimport React, { Component } from 'react';\nconst USER_SERVICE_URL = 'https://api.github.com/users/Kenshikento/repos';\n\nclass Portfolio extends Component {\n  constructor(props) {\n    super(props);\n\n    this.fetchUsersWithFetchAPI = () => {\n      this.setState({ ...this.state,\n        isFetching: true\n      });\n      fetch(USER_SERVICE_URL).then(response => response.json()).then(result => {\n        this.setState({\n          repo: result,\n          isFetching: false\n        });\n        console.log(result);\n      }).catch(e => {\n        console.log(e);\n        this.setState({ ...this.state,\n          isFetching: false\n        });\n      });\n    };\n\n    this.fetchUsers = this.fetchUsersWithFetchAPI;\n\n    this.groupBy = (array, key) => {\n      // Return the end result\n      return array.reduce((result, currentValue) => {\n        // If an array already present for key, push it to the array. Else create an array and push the object\n        (result[currentValue[key]] = result[currentValue[key]] || []).push(currentValue); // Return the current iteration `result` value, this will be taken as next iteration `result` value and accumulate\n\n        return result;\n      }, {}); // empty object is the initial value for result object\n    };\n\n    this.state = {\n      isFetching: false,\n      repo: []\n    };\n  }\n\n  componentDidMount() {\n    this.fetchUsers();\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timer);\n    this.timer = null;\n  }\n\n  render() {\n    const grouplang = this.groupBy(this.state.repo, 'language');\n    const items = this.state.repo.map(item =>\n    /*#__PURE__*/\n    // need to add in my own component below this \n    React.createElement(\"li\", {\n      key: item.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"a\", {\n      href: item.svn_url,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 39\n      }\n    }, item.name, \" \", item.language)));\n    return /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }\n    }, \"Repos\"), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }\n    }, \"List of repositories\"), items);\n  }\n\n}\n\nexport default Portfolio;","map":{"version":3,"sources":["C:/xampp/xampp1/htdocs/portfolio/frontend/src/components/Portfolio/Portfolio.jsx"],"names":["React","Component","USER_SERVICE_URL","Portfolio","constructor","props","fetchUsersWithFetchAPI","setState","state","isFetching","fetch","then","response","json","result","repo","console","log","catch","e","fetchUsers","groupBy","array","key","reduce","currentValue","push","componentDidMount","componentWillUnmount","clearInterval","timer","render","grouplang","items","map","item","id","svn_url","name","language"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,MAAMC,gBAAgB,GAAG,gDAAzB;;AAEA,MAAMC,SAAN,SAAwBF,SAAxB,CAAkC;AAC9BG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAiBnBC,sBAjBmB,GAiBM,MAAM;AAC3B,WAAKC,QAAL,CAAc,EAAC,GAAG,KAAKC,KAAT;AAAgBC,QAAAA,UAAU,EAAE;AAA5B,OAAd;AAEAC,MAAAA,KAAK,CAACR,gBAAD,CAAL,CACKS,IADL,CACUC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADtB,EAEKF,IAFL,CAEUG,MAAM,IAAI;AACZ,aAAKP,QAAL,CAAc;AAACQ,UAAAA,IAAI,EAAED,MAAP;AAAeL,UAAAA,UAAU,EAAE;AAA3B,SAAd;AACAO,QAAAA,OAAO,CAACC,GAAR,CAAYH,MAAZ;AACH,OALL,EAMKI,KANL,CAMWC,CAAC,IAAI;AACRH,QAAAA,OAAO,CAACC,GAAR,CAAYE,CAAZ;AACA,aAAKZ,QAAL,CAAc,EAAC,GAAG,KAAKC,KAAT;AAAgBC,UAAAA,UAAU,EAAE;AAA5B,SAAd;AACH,OATL;AAUH,KA9BkB;;AAAA,SAgCnBW,UAhCmB,GAgCN,KAAKd,sBAhCC;;AAAA,SAkCnBe,OAlCmB,GAkCT,CAACC,KAAD,EAAQC,GAAR,KAAgB;AACtB;AACA,aAAOD,KAAK,CAACE,MAAN,CAAa,CAACV,MAAD,EAASW,YAAT,KAA0B;AAC5C;AACA,SAACX,MAAM,CAACW,YAAY,CAACF,GAAD,CAAb,CAAN,GAA4BT,MAAM,CAACW,YAAY,CAACF,GAAD,CAAb,CAAN,IAA6B,EAA1D,EAA8DG,IAA9D,CACED,YADF,EAF4C,CAK5C;;AACA,eAAOX,MAAP;AACD,OAPM,EAOJ,EAPI,CAAP,CAFsB,CASd;AACX,KA5CkB;;AAEf,SAAKN,KAAL,GAAa;AACTC,MAAAA,UAAU,EAAE,KADH;AAETM,MAAAA,IAAI,EAAE;AAFG,KAAb;AAIH;;AAEDY,EAAAA,iBAAiB,GAAG;AAChB,SAAKP,UAAL;AACH;;AAEDQ,EAAAA,oBAAoB,GAAG;AACnBC,IAAAA,aAAa,CAAC,KAAKC,KAAN,CAAb;AACA,SAAKA,KAAL,GAAa,IAAb;AACH;;AA+BDC,EAAAA,MAAM,GAAG;AACL,UAAMC,SAAS,GAAG,KAAKX,OAAL,CAAa,KAAKb,KAAL,CAAWO,IAAxB,EAA6B,UAA7B,CAAlB;AAEA,UAAMkB,KAAK,GAAG,KAAKzB,KAAL,CAAWO,IAAX,CAAgBmB,GAAhB,CACTC,IAAD;AAAA;AACQ;AACA;AAAI,MAAA,GAAG,EAAEA,IAAI,CAACC,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAkB;AAAG,MAAA,IAAI,EAAGD,IAAI,CAACE,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAyBF,IAAI,CAACG,IAA9B,OAAqCH,IAAI,CAACI,QAA1C,CAAlB,CAHE,CAAd;AAOA,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAFJ,EAGKN,KAHL,CADJ;AAOH;;AAhE6B;;AAmElC,eAAe9B,SAAf","sourcesContent":["import React, { Component } from 'react';\r\n\r\nconst USER_SERVICE_URL = 'https://api.github.com/users/Kenshikento/repos';\r\n\r\nclass Portfolio extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \r\n            isFetching: false,\r\n            repo: [] \r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.fetchUsers();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.timer);\r\n        this.timer = null;\r\n    }\r\n\r\n    fetchUsersWithFetchAPI = () => {\r\n        this.setState({...this.state, isFetching: true});\r\n\r\n        fetch(USER_SERVICE_URL)\r\n            .then(response => response.json())\r\n            .then(result => {\r\n                this.setState({repo: result, isFetching: false})\r\n                console.log(result);\r\n            })\r\n            .catch(e => {\r\n                console.log(e);\r\n                this.setState({...this.state, isFetching: false});\r\n            });\r\n    };\r\n\r\n    fetchUsers = this.fetchUsersWithFetchAPI;\r\n    \r\n    groupBy = (array, key) => {\r\n        // Return the end result\r\n        return array.reduce((result, currentValue) => {\r\n          // If an array already present for key, push it to the array. Else create an array and push the object\r\n          (result[currentValue[key]] = result[currentValue[key]] || []).push(\r\n            currentValue\r\n          );\r\n          // Return the current iteration `result` value, this will be taken as next iteration `result` value and accumulate\r\n          return result;\r\n        }, {}); // empty object is the initial value for result object\r\n    };\r\n\r\n    render() {\r\n        const grouplang = this.groupBy(this.state.repo,'language');\r\n\r\n        const items = this.state.repo.map(\r\n            (item) =>\r\n                    // need to add in my own component below this \r\n                    <li key={item.id}><a href ={item.svn_url}>{item.name} {item.language}</a></li>\r\n            )\r\n        ;\r\n\r\n        return (\r\n            <ul>\r\n                <h4>Repos</h4>\r\n                <h3>List of repositories</h3>\r\n                {items}\r\n            </ul>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Portfolio;"]},"metadata":{},"sourceType":"module"}