{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\xampp1\\\\htdocs\\\\portfolio\\\\Frontend\\\\src\\\\components\\\\Portfolio\\\\Portfolio.jsx\";\nimport React, { Component } from 'react';\nimport RepoList from './RepoList';\nimport './Portfolio.scss';\nconst USER_SERVICE_URL = 'https://api.github.com/users/Kenshikento/repos';\n\nclass Portfolio extends Component {\n  constructor(props) {\n    super(props);\n\n    this.fetchUsersWithFetchAPI = () => {\n      this.setState({ ...this.state,\n        isFetching: true\n      });\n      fetch(USER_SERVICE_URL).then(response => response.json()).then(result => {\n        let groupLang = this.groupBy(result, 'language');\n        let keys = [];\n\n        for (const [key, value] of Object.entries(groupLang)) {\n          keys[key] = false;\n        } //let keys = Object.keys(groupLang);\n\n\n        this.setState({\n          repo: groupLang,\n          isFetching: false,\n          key: keys\n        });\n      }).catch(e => {\n        console.log(e); // TODO: to remove\n\n        this.setState({ ...this.state,\n          isFetching: false\n        });\n      });\n    };\n\n    this.fetchUsers = this.fetchUsersWithFetchAPI;\n\n    this.groupBy = (array, key) => {\n      return array.reduce((result, currentValue) => {\n        (result[currentValue[key]] = result[currentValue[key]] || []).push(currentValue);\n        return result;\n      }, {});\n    };\n\n    this.toggle = (e, name) => {\n      let items = [this.state.key];\n      let item = { ...items[0]\n      };\n\n      if (this.state.key[name] === false) {\n        items[0][name] = true;\n        console.log(this.state);\n        this.setState({\n          items\n        });\n      }\n\n      if (this.state.key[name] === true) {\n        items[0][name] = false;\n        this.setState({\n          items\n        });\n      }\n    };\n\n    this.state = {\n      isFetching: false,\n      repo: [],\n      key: []\n    };\n    this.toggle = this.toggle.bind(this);\n  }\n\n  componentDidMount() {\n    this.fetchUsers();\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timer);\n    this.timer = null;\n  }\n\n  render() {\n    //const groupLang = this.groupBy(this.state.repo,'language');\n    return /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }\n    }, \"List of GitHub repositories\"), Object.entries(this.state.repo).map(item => {\n      let name = item[0];\n      let list = item[1]; //console.log(this.state.key);\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"title\",\n        onClick: e => this.toggle(e, name),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 33\n        }\n      }, \" \", name, \" \")), list.map(repo => {\n        return /*#__PURE__*/React.createElement(RepoList, {\n          name: repo.name,\n          link: repo.svn_url,\n          title: name,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 37\n          }\n        });\n      }));\n    }));\n  }\n\n}\n\nexport default Portfolio;","map":{"version":3,"sources":["C:/xampp/xampp1/htdocs/portfolio/Frontend/src/components/Portfolio/Portfolio.jsx"],"names":["React","Component","RepoList","USER_SERVICE_URL","Portfolio","constructor","props","fetchUsersWithFetchAPI","setState","state","isFetching","fetch","then","response","json","result","groupLang","groupBy","keys","key","value","Object","entries","repo","catch","e","console","log","fetchUsers","array","reduce","currentValue","push","toggle","name","items","item","bind","componentDidMount","componentWillUnmount","clearInterval","timer","render","map","list","svn_url"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport RepoList from './RepoList';\r\nimport './Portfolio.scss';\r\n\r\nconst USER_SERVICE_URL = 'https://api.github.com/users/Kenshikento/repos';\r\n\r\nclass Portfolio extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \r\n            isFetching: false,\r\n            repo: [],\r\n            key: [],\r\n        };\r\n\r\n        this.toggle = this.toggle.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.fetchUsers();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.timer);\r\n        this.timer = null;\r\n    }\r\n\r\n    fetchUsersWithFetchAPI = () => {\r\n        this.setState({...this.state, isFetching: true});\r\n\r\n        fetch(USER_SERVICE_URL)\r\n            .then(response => response.json())\r\n            .then(result => {\r\n                let groupLang = this.groupBy(result,'language');\r\n                let keys = [];\r\n                for(const[key, value] of Object.entries(groupLang)) {\r\n\r\n                    keys[key] = false;\r\n                }\r\n\r\n                //let keys = Object.keys(groupLang);\r\n                this.setState({repo: groupLang, isFetching: false, key:keys})\r\n            })\r\n            .catch(e => {\r\n                console.log(e); // TODO: to remove\r\n                this.setState({...this.state, isFetching: false});\r\n            });\r\n    };\r\n\r\n    fetchUsers = this.fetchUsersWithFetchAPI;\r\n    \r\n    groupBy = (array, key) => {\r\n        return array.reduce((result, currentValue) => {\r\n          (result[currentValue[key]] = result[currentValue[key]] || []).push(\r\n            currentValue\r\n          );\r\n          return result;\r\n        }, {});\r\n    };\r\n\r\n    toggle =  (e, name) => {\r\n        let items = [this.state.key];\r\n        let item = {...items[0]};\r\n        if(this.state.key[name] === false) {\r\n            items[0][name] = true;\r\n            console.log(this.state);\r\n            this.setState({items});\r\n\r\n        }\r\n        if(this.state.key[name] === true) { \r\n            items[0][name] = false;\r\n            this.setState({items})\r\n        }\r\n    }\r\n\r\n    render() {\r\n        //const groupLang = this.groupBy(this.state.repo,'language');\r\n\r\n        return (\r\n            <ul>\r\n                <h1>List of GitHub repositories</h1>\r\n                {Object.entries(this.state.repo).map((item) => { \r\n                    let name = item[0];\r\n                    let list = item[1];\r\n                    //console.log(this.state.key);\r\n                    return (\r\n                        <div>\r\n                            <div className=\"title\" onClick={(e)=> this.toggle(e,name)}> \r\n                                <h1> {name} </h1>\r\n                            </div>\r\n                            { list.map((repo) => {                            \r\n                                return (\r\n                                    <RepoList\r\n                                        name={repo.name}\r\n                                        link={repo.svn_url}\r\n                                        title={name}\r\n                                    />\r\n                                )\r\n                            })}\r\n                        </div>\r\n                    )\r\n                })}                \r\n            </ul>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Portfolio;"]},"metadata":{},"sourceType":"module"}